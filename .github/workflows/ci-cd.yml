name: CI/CD Pipeline

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality & Validation
  validate:
    name: Validate HTML & CSS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install HTML/CSS validators
        run: |
          npm install -g html-validate
          npm install -g stylelint
          npm install -g stylelint-config-standard
          
      - name: Validate HTML
        run: |
          html-validate mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.html
          html-validate privacy-policy.html
          
      - name: Check for broken links
        run: |
          npm install -g broken-link-checker
          blc mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.html -ro
          
      - name: Accessibility check
        run: |
          npm install -g pa11y
          pa11y mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.html
          pa11y privacy-policy.html

  # Security & Dependencies
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance Testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=./.lighthouserc.json
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Build & Deploy (Development)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/development'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          npm install -g html-minifier
          npm install -g cssnano
          
      - name: Minify HTML files
        run: |
          html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-tag-whitespace --use-short-doctype --minify-css true --minify-js true mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.html -o mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.min.html
          html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-tag-whitespace --use-short-doctype --minify-css true --minify-js true privacy-policy.html -o privacy-policy.min.html
          
      - name: Create deployment package
        run: |
          mkdir -p dist
          cp *.min.html dist/
          cp *.html dist/ | grep -v "*.min.html" || true
          
      - name: Deploy to development environment
        uses: actions/upload-artifact@v4
        with:
          name: development-build
          path: dist/
          retention-days: 30

  # Build & Deploy (Production)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          npm install -g html-minifier
          npm install -g cssnano
          npm install -g critical
          
      - name: Minify and optimize HTML files
        run: |
          html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-tag-whitespace --use-short-doctype --minify-css true --minify-js true mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.html -o mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.min.html
          html-minifier --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-tag-whitespace --use-short-doctype --minify-css true --minify-js true privacy-policy.html -o privacy-policy.min.html
          
      - name: Generate critical CSS
        run: |
          critical mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.min.html --inline --base dist/ --target mihris-kraamzorg-layout-pro-always-send-welcome-fixed-icons-ig-clean.critical.html
          
      - name: Create production deployment package
        run: |
          mkdir -p dist-prod
          cp *.min.html dist-prod/
          cp *.critical.html dist-prod/ || true
          cp *.html dist-prod/ | grep -v "*.min.html" | grep -v "*.critical.html" || true
          
      - name: Deploy to production environment
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist-prod/
          retention-days: 90

  # Notifications
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Check the logs for more details"
